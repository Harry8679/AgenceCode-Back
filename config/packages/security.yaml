# config/packages/security.yaml
security:
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

  providers:
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    # Point d'entrée d'authentification (login JSON)
    login:
      pattern: ^/api/v1/auth/login$
      stateless: true
      provider: app_user_provider
      json_login:
        check_path: /api/v1/auth/login
        username_path: email
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    # Tous les autres endpoints API protégés par le JWT
    api:
      pattern: ^/api/
      stateless: true
      provider: app_user_provider
      jwt: ~

  access_control:
    # Préflight CORS (optionnel mais pratique si tu appelles depuis le front)
    - { path: ^/api, roles: PUBLIC_ACCESS, methods: [OPTIONS] }

    # Endpoints publics
    # - { path: ^/api/admin, roles: ROLE_ADMIN }
    # - { path: ^/api/v1/auth/register$, roles: PUBLIC_ACCESS }
    # - { path: ^/api/v1/auth/login$, roles: PUBLIC_ACCESS }
    # - { path: ^/api/subjects, roles: ROLE_ADMIN } 

    - { path: ^/api/admin, roles: ROLE_ADMIN }   # ex: préfixe pour back-office API
    - { path: ^/api/subjects, roles: ROLE_ADMIN, methods: [POST,PUT,DELETE] }
    - { path: ^/api/subjects$, roles: PUBLIC_ACCESS, methods: [GET] }
    - { path: ^/api/v1/auth/login$, roles: PUBLIC_ACCESS }
    - { path: ^/api/v1/auth/register$, roles: PUBLIC_ACCESS }
    - { path: ^/api/, roles: IS_AUTHENTICATED_FULLY }

    # Le reste de /api nécessite un JWT valide
    - { path: ^/api/, roles: IS_AUTHENTICATED_FULLY }
